'''
Name        : Mine_Dict_User_Ratings.py
Version     : 1.0a
Author      : Alpaca

Input: UserID
Intermediates:
    CustomerIDDict.csv
Output: MovieIDs, MovieRatings

Details:
** The ultimate purpose for this is to find minimize RMSE for each cluster.
'''

import time

def Mine_Dict_User_Ratings(DesiredUserID, InEpoch = True):
    '''
    #file name CustomerIDDict.csv generated by ___________________________________
    # File format is:
    UserID: MovieID 1 | Date 1 | Rating 1, MovieID 2 | Date 2 | Rating 2, ..., \n
    Each User Information is on a single currentLine.
    '''
    MovieRatings = []
    MovieIDs = []    # Can be used to create keys, but not the focus right now
    MovieDates = []


    fileName = '../data/customerIDDict.csv'
    # open the file
    FileHeader = open(fileName, 'r')

    # Generating Keys and data
    UserMovieData = {}
    with open(fileName) as fileHeader:
        for currentLine in fileHeader:
            # userID = userID: movie data is (Movie ID|Date|Rating)
            (userID, movieData) = currentLine.split(':')
            UserMovieData[int(userID)] = movieData


    # print('UserID Lists as keys: ',UserMovieData.keys())

    # Use "in" function to search since it is the fastest way to search
    if DesiredUserID in UserMovieData:
        DesiredUserMovieData = UserMovieData[DesiredUserID]
        # print('User Ratings Found')
        # print('For User ID:', DesiredUserID, ', the movie ratings are: (MovieID|YYYY-MM-DD|Rating): \n', DesiredUserMovieData)

        AllMovieData = DesiredUserMovieData.split(',')
        #print('All Movie data Here Split into an Array: \n',AllMovieData)

        for CurrentMovie in AllMovieData:
            #(Movie ID|Date|Rating)
            CurrentMovieData = CurrentMovie.split('|')

            MovieRatings.append(int(CurrentMovieData[2]))
            CurrentMovieDate = CurrentMovieData[1]

            if InEpoch:
                DateRatedFormat = '%Y-%m-%d'
                DateRatedEpoch = int(time.mktime(time.strptime(CurrentMovieDate, DateRatedFormat)))
                MovieDates.append(DateRatedEpoch)
            else:
                MovieDates.append(CurrentMovieDate)


    else:
        print('User Ratings Not Found')

    FileHeader.close()
    return DesiredUserID, MovieRatings, MovieDates


#=======================================================================================================================
''' Trash Code


    count = 0
    Found = False

    currentLine = FileHeader.readline()
    currentLine = currentLine.strip('\r').strip('\n').strip('\r').strip('\n')

    print('Searching for user ID', DesiredUserID)

    while currentLine:
        data = currentLine.split(':')
        CurrentUserID = data[0]                         # data[1] are the movie data. data[0] being the MovieIDs
        if CurrentUserID == DesiredUserID:
            print('Found')
            Found = True
            break
        currentLine = FileHeader.readline()
        currentLine = currentLine.strip('\r').strip('\n').strip('\r').strip('\n')
        AllMovieData = data[1].split(',')
        # print('All Movie data', AllMovieData, '\n')


        # print('Found? ', Found)



        for CurrentMovieData in AllMovieData:
            # print(int(CurrentMovieData.split('|')[2]))
            MovieRatings.append(int(CurrentMovieData.split('|')[2]))
            CurrentMovieDate = CurrentMovieData.split('|')[1]
            if InEpoch:
                DateRatedFormat = '%Y-%m-%d'
                DateRatedEpoch = int(time.mktime(time.strptime(CurrentMovieDate, DateRatedFormat)))
                MovieDates.append(DateRatedEpoch)
            else:
                MovieDates.append(CurrentMovieDate)

'''