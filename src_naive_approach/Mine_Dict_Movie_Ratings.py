'''
Name        : Mine_Dict_Movie_Ratings.py
Version     : 1.0a
Author      : Alpaca


Input: MovieID from movieIDDict.csv generated by __________________________________
Output: Array of Movie Ratings for all users that watched MovieID

Details:
1. The output is the ratings for all the movies watched by UserID as compiled in MovieIDDict.csv
2. This will be done by using the MovieID
'''


import time

def Mine_Dict_User_Ratings(DesiredmovieID, InEpoch = True):
    '''
    #file name movieIDDict.csv generated by ___________________________________
    # File format is:
    MovieID: UserID 1 | Date 1 | Rating 1, UserID 2 | Date 2 | Rating 2, ..., \n
    Each Movie is on a single line.
    '''

    userRatings = []
    MovieIDs = []    # Can be used to create keys, but not the focus right now
    userDates = []

    fileName = '../data/movieIDDict.csv'
    # open the file
    FileHeader = open(fileName, 'r')

    # Generating Keys and data
    MovieUserData = {}
    with open(fileName) as fileHeader:
        for currentLine in fileHeader:
            # userID = userID: movie data is (Movie ID|Date|Rating)
            (userID, userData) = currentLine.split(':')
            MovieUserData[int(userID)] = userData


    # print('UserID Lists as keys: ',MovieUserData.keys())

    # Use "in" function to search since it is the fastest way to search
    if DesiredmovieID in MovieUserData:
        DesiredUserMovieData = MovieUserData[DesiredmovieID]
        # print('User Ratings Found')
        # print('For User ID:', DesiredUserID, ', the movie ratings are: (MovieID|YYYY-MM-DD|Rating): \n', DesiredUserMovieData)

        AllUserData = DesiredUserMovieData.split(',')
        #print('All Movie data Here Split into an Array: \n',AllUserData)

        for CurrentUser in AllUserData:
            #(Movie ID|Date|Rating)
            CurrentUserData = CurrentUser.split('|')

            userRatings.append(int(CurrentUserData[2]))
            CurrentUserDate = CurrentUserData[1]

            if InEpoch:
                DateRatedFormat = '%Y-%m-%d'
                DateRatedEpoch = int(time.mktime(time.strptime(CurrentUserDate, DateRatedFormat)))
                userDates.append(DateRatedEpoch)
            else:
                userDates.append(CurrentUserDate)


    else:
        print('User Ratings Not Found')

    FileHeader.close()
    return DesiredmovieID, userRatings, userDates






































import time

def Mine_Dict_Movie_Ratings(DesiredMovieID, InEpoch = True):
    '''
    #file name movieIDDict.csv generated by ___________________________________
    # File format is:
    MovieID: UserID 1 | Date 1 | Rating 1, UserID 2 | Date 2 | Rating 2, ..., \n
    Each Movie is on a single line.
    '''
    fileName = '../data/movieIDDict.csv'
    # open the file
    FileHeader = open(fileName, 'r')

    count = 0

    line = FileHeader.readline()
    line = line.strip('\r').strip('\n').strip('\r').strip('\n')

    while line:
        count += 1
        if count == DesiredMovieID:
            break
        line = FileHeader.readline()
        line = line.strip('\r').strip('\n').strip('\r').strip('\n')

    FileHeader.close()

    data = line.split(':')

    #print(data)
    MovieRatings = []
    MovieDates = []

    # data[1] are the movie data. data[0] being the MovieIDs
    AllMovieData = data[1].split(',')


    for CurrentMovieData in AllMovieData:
        #print(d)
        MovieRatings.append(int(CurrentMovieData.split('|')[2]))
        CurrentMovieDate = CurrentMovieData.split('|')[1]
        if InEpoch:
            DateRatedFormat = '%Y-%m-%d'
            DateRatedEpoch = int(time.mktime(time.strptime(CurrentMovieDate, DateRatedFormat)))
            MovieDates.append(DateRatedEpoch)
        else:
            MovieDates.append(CurrentMovieDate)

    MovieRatingsCount = len(MovieRatings)
    # print(MovieRatingsCount)
    return DesiredMovieID, MovieRatings, MovieDates, MovieRatingsCount
